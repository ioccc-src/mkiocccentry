.\" section 1 man page for jparse
.\"
.\" This man page was first written by Cody Boone Ferguson for the IOCCC
.\" in 2022.
.\"
.\" Humour impairment is not virtue nor is it a vice, it's just plain
.\" wrong: almost as wrong as JSON spec mis-features and C++ obfuscation! :-)
.\"
.\" "Share and Enjoy!"
.\"     --  Sirius Cybernetics Corporation Complaints Division, JSON spec department. :-)
.\"
.TH jparse 1 "09 September 2025" "jparse" "jparse tools"
.SH NAME
.B jparse
\- a JSON parser written in C
.SH SYNOPSIS
.B jparse
.RB [\| \-h \|]
.RB [\| \-v
.IR level \|]
.RB [\| \-J \|
.IR level \|]
.RB [\| \-q \|]
.RB [\| \-V \|]
.RB [\| \-s \|]
.I arg...
.SH DESCRIPTION
.B jparse
parses one or more blocks of JSON text either from one or more files
.RB \|( \-
means
.BR stdin \|)
or one or more string passed to the program (if the
.B \-s
option is used), reporting on those that are invalid (depending on the verbosity level it will also report valid JSON).
Depending on the JSON verbosity level it will also show more information.
This tool by itself is useful to validate JSON but the
.BR jparse (3)
API is much more useful in general as it allows for one to actually do things with the JSON.
.PP
.SH OPTIONS
.TP
.B \-h
Show help and exit.
.TP
.BI \-v\  level
Set verbosity level to
.IR level
(def: 0).
.TP
.BI \-J\  level
Set JSON verbosity level to
.IR level
(def: 0).
.TP
.B \-q
Suppresses some of the output (def: loud :-) ).
.TP
.B \-V
Print version strings and exit.
.TP
.B \-s
Parse argument as a string.
.SH EXIT STATUS
.TP
0
(all) file(s)/string(s) is (are) valid JSON
.TQ
1
at least one file or string is invalid JSON
.TQ
2
.B \-h
or
.B \-V
used and help string or version strings printed.
.TQ
3
command line error
.TQ
>=4
internal error
.SH NOTES
.PP
This JSON parser was written as a collaboration between Cody Boone Ferguson and Landon Curt Noll, one of the IOCCC Judges, to support
the IOCCC28 and beyond.
.PP
For more detailed history that goes beyond this humble man page we recommend you check
.BR jparse (1),
.IR CHANGES.md ,
.IR README.md ,
the GitHub git log as well as reading the source code (or not :\-) ).
Understand that by source we refer to the
.I jparse.l
and
.I jparse.y
files as well as files not generated by
.BR flex (1)
and
.BR bison (1)\c
\&: we do NOT recommend you read the generated code!
This is because doing so is might give you nightmares and cause other horrible symptoms. :-)
See the apology at the top of the generated files or look directly at \fIsorry.tm.ca.h\fP instead for a warning and apology.
.SS Valid JSON
.PP
In the case that a value cannot be converted but it is valid JSON the tool will report, by exit code, that it's valid JSON, but it will warn that it could not be converted.
This could happen if, for example, a number is too big for the C types.
As long as the JSON is entirely valid the tool will exit 0.
.SH BUGS
.PP
Although error reporting does have locations it is only line numbers and columns.
Additionally the column can be misleading because of characters that take up more than one column but are counted as just one (tabs for example).
.SH EXAMPLES
.PP
Parse the JSON string
.BR {\ "test_mode"\ :\ false\ } :
.sp
.RS
.ft B
 jparse \-s '{ "test_mode" : false }'
.ft R
.RE
.PP
Parse input from
.B stdin
(send
.BR EOF ,
usually ctrl\-d or
.BR ^D ,
to parse):
.sp
.RS
.ft B
 jparse \-
.br
 []
.br
 ^D
.br
.ft R
.RE
.PP
Parse just a negative number:
.PP
.RS
.ft B
 jparse \-s \-\- \-5
.ft R
.RE
.PP
Parse
.I .info.json
file:
.sp
.RS
.ft B
 jparse .info.json
.ft R
.RE
.SH SEE ALSO
.PP
.BR jparse (3),
.BR jstrdecode (1),
.BR jstrencode (1),
.BR flex (1),
.BR bison (1)
