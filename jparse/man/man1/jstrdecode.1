.\" section 1 man page for jstrdecode
.\"
.\" This man page was first written by Cody Boone Ferguson for the IOCCC
.\" in 2022.
.\"
.\" Humour impairment is not virtue nor is it a vice, it's just plain
.\" wrong: almost as wrong as JSON spec mis-features and C++ obfuscation! :-)
.\"
.\" "Share and Enjoy!"
.\"     --  Sirius Cybernetics Corporation Complaints Division, JSON spec department. :-)
.\"
.TH jstrdecode 1 "16 November 2024" "jstrdecode" "jparse tools"
.SH NAME
.B jstrdecode
\- JSON decode command line strings
.SH SYNOPSIS
.B jstrdecode
.RB [\| \-h \|]
.RB [\| \-v
.IR level \|]
.RB [\| \-q \|]
.RB [\| \-V \|]
.RB [\| \-t \|]
.RB [\| \-n \|]
.RB [\| \-N \|]
.RB [\| \-Q \|]
.RB [\| \-e \|]
.RB [\| \-d \|]
.RB [\| \-E
.IR level \|]
.RI [\| string
.IR ... \|]
.SH DESCRIPTION
.B jstrdecode
decodes command line strings in JSON format according to the so-called JSON specification.
It will, in the case of UTF\-8 or UTF\-16 codepoints in the JSON format of
.B
.B \\\\uxxxx
or
.BR \\\\uxxxx\\\\uxxxx ,
where
.B x
is a hexadecimal digit, decode to the proper Unicode symbol, although if your system cannot show it or it is invalid, you might see a symbol that indicates this.
.PP
If given the
.B \-Q
option it will enclose the entire output in quotes.
If given the
.B \-e
option it will enclose each decoded string with escaped double quotes,
if and only if more than one string arg is given on the command line.
The use of
.B \-Q
and
.B \-e
together will surround the entire output with unescaped quotes and each decoded arg will be surrounded with escaped (backslashed) quotes.
To ignore newlines in the input, use the
.B \-N
option.
On the other hand, if you do not want a newline printed after the output, use the
.B \-n
option.
By default the program reads from
.BR stdin ,
if no arg is specified.
Otherwise it will act on the arguments to the program.
.PP
If it is desired to not require surrounding double quotes ("s) in the input, use the
.B \-d
option.
.PP
If given the
.B \-t
option it performs a test on the JSON decode and encode functions.
.SH OPTIONS
.TP
.B \-h
Show help and exit
.TP
.BI \-v\  level
Set verbosity level to
.IR level
(def: 0).
.TP
.B \-q
Suppresses some of the output (def: loud :-) ).
.TP
.B \-V
Show version and exit
.TP
.B \-t
Run tests on the JSON decode/encode functions
.TP
.B \-n
Do not output a newline after the decode function
.TP
.B \-N
Ignore all newline characters in input
.TP
.B \-Q
Enclose output in double quotes
.TP
.B \-e
Enclose each encoded string (after decoding) with escaped double quotes (def: do not),
if any only if more than one string is given on the command line.
.TP
.B \-d
Don't require input to be surrounded by double quotes ("s).
.TP
.BI \-E\  level
Entertainment mode at level
.IR level .
.SH EXIT STATUS
.TP
0
decode successful
.TQ
1
decode unsuccessful
.TQ
2
.B \-h
and help string printed or
.B \-V
and version string printed
.TQ
3
command line error
.TQ
>= 10
internal error
.SH BUGS
.PP
A number of issues are known when it comes to encoding, amongst them:
.PP
It does not convert code points to unicode symbols.
.PP
It duplicates
.BR \e
when it should be singular, according to JavaScript encoding of JSON with
.BR \e .
.PP
It does not handle invalid 
.BR \e\-
escaped characters in the same way as JavaScript does, and in very wrong ways.
.PP
Otherwise, a known problem when reading from stdin (in the case that the input does not come from the pipe), at least with some terminal applications, is that one has to hit ctrl\-d (or whatever one has
.B EOF
configured as) twice in order for it to properly send
.B EOF
(this occurs in other applications as well so it seems to be a terminal problem).
.PP
If you have an issue with the tool you can report it at
.br
.IR \<https://github.com/xexyl/jparse/issues\> .
.SH EXAMPLES
.PP
Display the dragon emoji (U+1F409), without having to worry about double quotes:
.sp
.RS
.ft B
 jstrdecode -d "\\uD83D\\uDC09"
.ft R
.RE
.PP
Ignore newlines in input:
.sp
.RS
.ft B
 printf '"foo\\\\nbar\\"' | jstrdecode -N 
.ft R
.RE
.PP
Enclose output in double quotes, without having to worry about quoting args:
.sp
.RS
.ft B
 jstrdecode -d -Q foo bar baz
.ft R
.RE
.PP
Run test mode:
.sp
.RS
.ft B
 jstrdecode \-t
.ft R
.RE
.PP
Have some fun:
.sp
.RS
.ft B
 jstrdecode -E 1
.ft R
.RE
.PP
Have even more fun:
.sp
.RS
.ft B
 jstrdecode -E 3
.ft R
.RE
.SH SEE ALSO
.PP
For the encode counterpart, see
.BR jstrencode (1).
